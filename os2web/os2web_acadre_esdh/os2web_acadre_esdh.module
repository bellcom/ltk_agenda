<?php

/**
 * @file
 * This module implements Acadre ESDH backend for use in os2web
 */

define('ACADRE_MM_IMPORT_DIR', 'acadre://');
define('ACADRE_MM_DEFAULT_APPROVED', '62,59,64,53,54,56,57,63,58,51,55,61,68,69,42');

// MM settings.
define('MM_USE_ALTERNATIVE_FILE_URI_SCHEME', TRUE);
define('MM_BPA_BODY_FORMAT', 'os2web_acadre_esdh');
define('MM_REPUBLISH_MEETINGS', TRUE);
define('MM_REPUBLISH_SUBVERSION', TRUE);

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Register as provider of esdh plugins
 */
function os2web_acadre_esdh_ctools_plugin_directory($module, $plugin) {
  if ($module == 'os2web_esdh_provider') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add configuration to the settings form.
 */
function os2web_acadre_esdh_form_os2web_settings_settings_form_alter(&$form, &$form_state) {

  // MM configuration.
  $form['meetings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Referat import',
    '#description' => 'Indstillinger der vedrÃ¸rer importen af Acadre referater og dagsordener.',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['meetings']['os2web_meetings_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Sti til acadre publish folder.',
    '#description' => 'Dette er stien hvor Acadre publisere .XML filer til.',
    '#default_value' => variable_get('os2web_meetings_path', ACADRE_MM_IMPORT_DIR),
  );
  $form['meetings']['os2web_meetings_approved_committee'] = array(
    '#type' => 'textfield',
    '#title' => 'Godkendte Udvalg',
    '#maxlength' => 200,
    '#description' => 'Komma sepereret liste over udvalgs-id der er godkendt til publisering.',
    '#default_value' => variable_get('os2web_meetings_approved_committee', ACADRE_MM_DEFAULT_APPROVED),
  );

  $form['meetings']['os2web_meetings_import_closed_agenda'] = array(
    '#type' => 'checkbox',
    '#title' => t('Import closed agenda'),
    '#description'=>t('This decides if closed agenda is or is not to be imported'),
    '#default_value' => variable_get('os2web_meetings_import_closed_agenda', false),
  );
      

  // CM Configuration.
  $form['os2web_pws_config_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('PWS Endpoint configuration'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url'),
    '#title' => t('PWS URL for V4'),
    '#description' => t('URL to the PWS webservice endpoint.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url_v6'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url_v6'),
    '#title' => t('PWS URL for  V6'),
    '#description' => t('URL to the PWSv6 webservice endpoint.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_url_search'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_url_search'),
    '#title' => t('PWS URL for Search service'),
    '#description' => t('URL to the webservice endpoint that runs the search service.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_user'),
    '#title' => t('PWS login user'),
    '#description' => t('PWS HTTP authentification user.'),
  );
  $form['os2web_pws_config_group']['os2web_pws_password'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_password'),
    '#title' => t('PWS password'),
    '#description' => t('PWS HTTP authentification password.'),
  );
  // Proxy setups
  $form['os2web_pws_proxy_group'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => !variable_get('os2web_pws_proxy'),
    '#title' => t('Proxy configuration'),
    '#weight' => 10,
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2web_pws_proxy'),
    '#title' => t('Use proxy?'),
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_proxy_host'),
    '#title' => t('Proxy hostname or IP'),
  );
  $form['os2web_pws_proxy_group']['os2web_pws_proxy_port'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_pws_proxy_port'),
    '#title' => t('Proxy port number.'),
  );
  $form['os2web_pws_adlib_group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Adlib Endpoint configuration'),
  );
  $form['os2web_pws_adlib_group']['os2web_adlib_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('os2web_adlib_url', 'http://706CAR01/ExponentWSA/ExponentWSA.asmx?wsdl'),
    '#title' => t('URL for Adlib service endpoint'),
    '#description' => t('URL to the webservice endpoint that runs the Adlib service.'),
  );
}

/**
 * Implements hook_os2web_help().
 */
function os2web_acadre_esdh_os2web_help($sections) {

  // Content types.
  $sections['configuration'] = t('<p>Configure PWS and resume import in the <a href="@url" target="_blank">OS2web Configuration</a><br /><i>This requires some insight in the server setup and the data recieved.</i><br />Setup the required endpoints, path to the published XML files from acadre and the authentication user/pass for accessing the PWS endpoints.</p>', array('@url' => url('admin/config/os2web/settings')));
  $sections['configuration'] .= t('<p><a href="@url" target="_blank">See the advanced documentation for acadre</a></p>', array('@url' => url('admin/help/os2web_acadre_esdh')));
  return $sections;
}

/**
 * Implements hook_help().
 */
//function os2web_acadre_esdh_help($path, $arg) {
//  switch ($path) {
//    case 'admin/help#os2web_acadre_esdh':
      // TODO.
//      return t('Missing documentation.');
//  }
//}

/**
 * Implements hook_stream_wrappers().
 *
 * Custom Acadre stream wrapper to avoid problems when moving files.
 */
function os2web_acadre_esdh_stream_wrappers() {
  return array(
    'acadre' => array(
      'name' => t('Acadre'),
      'class' => 'AcadreStreamWrapper',
      'description' => t('Stream wrapper to the Acadre ESDH integration.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );
}

/**
 * Acadre (acadre://) stream wrapper class.
 *
 * Provides support for storing Acadre documents with the Drupal file
 * interface.
 */
class AcadreStreamWrapper extends DrupalPublicStreamWrapper {

  /**
   * {@inheritdoc}
   */
  public function getDirectoryPath() {
    $path = variable_get('os2web_acadre_stream_wrapper_path', 'acadre');
    $path = $path ? '/' . $path : '';
    return parent::getDirectoryPath() . $path;
  }

  /**
   * {@inheritdoc}
   */
  public function getExternalUrl() {
    $path = str_replace('\\', '/', $this->getTarget());
    return $GLOBALS['base_url'] . '/' . self::getDirectoryPath() . '/' . drupal_encode_path($path);
  }
}
